!pip install yfinance
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Define start and end dates
start_date = '2019-10-01'
end_date = '2024-10-01'

# Download VCB.VN data for the specified date range
data = yf.download(tickers='VCB.VN', start=start_date, end=end_date, interval='1d')

# Calculate short-term and long-term SMAs
data['SMA_short'] = data['Close'].rolling(window=20).mean()
data['SMA_long'] = data['Close'].rolling(window=50).mean()

# Generate trading signals
data['Signal'] = 0.0
data['Signal'][data['SMA_short'] > data['SMA_long']] = 1.0
data['Signal'][data['SMA_short'] < data['SMA_long']] = -1.0

# Calculate daily returns
data['Returns'] = data['Close'].pct_change()

# Calculate strategy returns (shifted signal)
data['Strategy_Returns'] = data['Returns'] * data['Signal'].shift(1)

# --- Debugging and Validation ---

# Print some data to inspect
print(data[['Close', 'SMA_short', 'SMA_long', 'Signal', 'Returns', 'Strategy_Returns']].head(25))

# Plot Signals and Returns
plt.figure(figsize=(12, 6))
plt.plot(data['Close'], label='Close Price')
plt.plot(data['SMA_short'], label='SMA Short')
plt.plot(data['SMA_long'], label='SMA Long')
plt.scatter(data.index[data['Signal'] == 1], data['Close'][data['Signal'] == 1], marker='^', color='green', label='Buy Signal')
plt.scatter(data.index[data['Signal'] == -1], data['Close'][data['Signal'] == -1], marker='v', color='red', label='Sell Signal')
plt.title('VCB.VN Price, SMAs, and Signals')
plt.legend()
plt.show()

# --- End of Debugging and Validation ---

# Calculate the number of correct predicted directions
correct_predictions = np.sum(np.where((data['Returns'] > 0) & (data['Signal'].shift(1) > 0) |
                                      (data['Returns'] < 0) & (data['Signal'].shift(1) < 0), 1, 0))

# Calculate the total number of predictions
total_predictions = len(data[data['Signal'].shift(1) != 0])

# Calculate the accuracy
accuracy = correct_predictions / total_predictions

# Print the accuracy
print(f"Accuracy of predicted direction: {accuracy:.2f}")

# Plot cumulative returns
(1 + data['Strategy_Returns']).cumprod().plot()
plt.title('Cumulative Strategy Returns (VCB.VN)')
plt.show()
